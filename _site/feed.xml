<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-07T09:47:14-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tibi Andronescu</title><subtitle>Personal Website</subtitle><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><entry><title type="html">Communication Base Station</title><link href="http://localhost:4000/Communication-Base-Station/" rel="alternate" type="text/html" title="Communication Base Station" /><published>2019-05-03T00:00:00-04:00</published><updated>2019-05-03T00:00:00-04:00</updated><id>http://localhost:4000/Communication-Base-Station</id><content type="html" xml:base="http://localhost:4000/Communication-Base-Station/">&lt;p&gt;As part of the University of Waterloo Robotics Student Design Team, I undertook a project to construct a communication base station capable of tracking a moving rover robot and transmitting information to it via antenna. This was a multidisciplinary project combining aspects of mechanical, electrical and software engineering into one.&lt;/p&gt;

&lt;h2 id=&quot;mechanical&quot;&gt;Mechanical&lt;/h2&gt;

&lt;p&gt;The mechanical side of the project involved designing the base station from scratch using SolidWorks. The mechanical system functioned on the principle of using a worm-gear system to rotate the antenna in either direction. Below is a screenshot of the finished SolidWorks model: 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/cbs.png&quot; alt=&quot;SolidWorks 3D Model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to making the design, I also sourced all the parts required to complete the device. After ordering all the parts, I physically machined all the pieces and assembled the final product.&lt;/p&gt;

&lt;h2 id=&quot;software&quot;&gt;Software&lt;/h2&gt;

&lt;p&gt;In terms of software, I programmed the algorithms that rotated the antenna to continually point in the direction of the rover robot as it moved around in the field. The code was written in C++ and hosted on the ROS system to interface with the rest of the robot’s code. The location of the rover was acquired through GPS, IMU and encoder data fused using an EKF filter.&lt;/p&gt;

&lt;p&gt;In order to test and troubleshoot the logic, I imported the CAD model of the base station into a Gazebo/RVIZ simulator and was able to fine-tune the algorithm for the rover. A video demonstrating this simulation is feature below (the choppiness of the video is due to the sheer strain put on my laptop from running video capture software at the same time as a complex simulation):&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/1D0DC3AFCta3nRObb6diKicVJ1_wvgWAL/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;electrical&quot;&gt;Electrical&lt;/h2&gt;

&lt;p&gt;The final element of the project was to power the worm-gear system using a DC gear motor. Furthermore, the gear motor was controlled by an Arduino coupled with an H-Bridge integrated circuit to be able to send specific commands to the motor based on the instructions being delivered from the tracking algorithm. The Arduino also had to communicate with a Raspberry Pi running a ROS Node which was done through a serial connection. Lastly, the entire system had to be powered which was done through a 12V lithium polymer battery.&lt;/p&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="C++" /><category term="ROS" /><category term="Gazebo" /><category term="RVIZ" /><category term="SolidWorks" /><category term="Arduino" /><category term="Raspberry Pi" /><category term="motor" /><category term="controller" /><category term="mechanical" /><category term="electrical" /><category term="software" /><summary type="html">As part of the University of Waterloo Robotics Student Design Team, I undertook a project to construct a communication base station capable of tracking a moving rover robot and transmitting information to it via antenna. This was a multidisciplinary project combining aspects of mechanical, electrical and software engineering into one.</summary></entry><entry><title type="html">Fantasy Sports Website</title><link href="http://localhost:4000/Fantasy-Sport-Website/" rel="alternate" type="text/html" title="Fantasy Sports Website" /><published>2019-04-07T00:00:00-04:00</published><updated>2019-04-07T00:00:00-04:00</updated><id>http://localhost:4000/Fantasy-Sport-Website</id><content type="html" xml:base="http://localhost:4000/Fantasy-Sport-Website/">&lt;p&gt;In the past, I often enjoyed holding annual competitions with my friend groups over choosing the correct score predictions for various sport events. Previously, I manually collected people’s guesses and had to keep score of everything by hand. Instead of this tedious process, I automated this hobby and spawned a website to organize this information. This served as an excellent means of hosting these annual tournaments. The website can be found at this url (currently the DNS service is turned off until the next sporting playoff period begins): &lt;a href=&quot;https://fantasykernel.com/&quot;&gt;https://fantasykernel.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along the journey of creating this website, I learned many valuable skills that can be applied in both web development and other applications outside this realm.&lt;/p&gt;

&lt;p&gt;To begin, I had to go through the process of acquiring a domain name through a DNS provider and performing the initial setup required to actually host a website. Another aspect of this preliminary setup was to secure the website using an SSL certificate.&lt;/p&gt;

&lt;p&gt;Next, I had to select a means of setting up the infrastructure for the website. After conducting a fair share of research into the options available, I chose to use a Digital Ocean droplet based on the WordPress content management system. WordPress provided a convenient way to organize the front-end aspects of the website while also providing a backbone for the SQL database structure. Here is a view of the homepage created using a WordPress plugin called Elementor: 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/fantasy-kernel-home.png&quot; alt=&quot;Fantasky Kernel Home&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next step was begin organizing the basic page structure of the website using PHP to construct the backend content of the website. Building on top of WordPress’ user login system, I implemented a custom plugin to change the flow of the user login and registration system to match the scope of the website. Instead of using the default WordPress pages and system, the custom plugin allowed for a new interface, fields of interest, security checks and anti-spam features. The image below shows the registration page used for new users:
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/fantasy-kernel-register.png&quot; alt=&quot;Fantasky Kernel Register&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to add the desired fantasy sport functionality, user information would have to be stored in a database to save their scores and input. SQL was used to achieve this purpose, and the information in the SQL tables was used to filter website content displayed to user’s based on their registration status or points accumulated. Some highlights of the website will be illustrated below including a user score input system and the leaderboard showing the top-scoring players. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/fantasy-kernel-submit-scores.png&quot; alt=&quot;Fantasky Kernel Score Input&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/fantasy-kernel-leaderboards.png&quot; alt=&quot;Fantasky Kernel Leaderboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, this was a fun project automating a game originally played among my friend group into a full-blown website. The first test run of the 2019 NBA Playoffs accumulated over 30 users and was a success. In the future, I certainly hope to grow the website, improve the functionality and expand to other sport events.&lt;/p&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="website" /><category term="PHP" /><category term="SQL" /><category term="DNS" /><category term="WordPress" /><category term="software" /><summary type="html">In the past, I often enjoyed holding annual competitions with my friend groups over choosing the correct score predictions for various sport events. Previously, I manually collected people’s guesses and had to keep score of everything by hand. Instead of this tedious process, I automated this hobby and spawned a website to organize this information. This served as an excellent means of hosting these annual tournaments. The website can be found at this url (currently the DNS service is turned off until the next sporting playoff period begins): https://fantasykernel.com/</summary></entry><entry><title type="html">Electric Longboard</title><link href="http://localhost:4000/Electric-Longboard/" rel="alternate" type="text/html" title="Electric Longboard" /><published>2018-07-20T00:00:00-04:00</published><updated>2018-07-20T00:00:00-04:00</updated><id>http://localhost:4000/Electric-Longboard</id><content type="html" xml:base="http://localhost:4000/Electric-Longboard/">&lt;p&gt;After many hours of research, ordering parts, assembly and troubleshooting my electric longboard completed its first few trial runs as shown in the videos below.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/1Se2hRxlJoFCT2OBcwbA-a0FGnyRDdGKp/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;
&lt;br /&gt;
&lt;iframe src=&quot;https://drive.google.com/file/d/1o4h1cIwPDnE405XYR6Z-vpOI-E71b0Ps/preview&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;key-points-for-summary&quot;&gt;Key Points for Summary&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Top Speed: ~30km/h and Range: ~50km&lt;/li&gt;
  &lt;li&gt;6S2P Lithium Polymer Battery Configuration (~22.2V and 10Ah capacity)&lt;/li&gt;
  &lt;li&gt;190KV Brushless Outrunner Motor, 2.25 gear ratio with 12mm wide pulley&lt;/li&gt;
  &lt;li&gt;FOCBOX Motor Controller 120A Peak Current Limit 60A Continuous Limit&lt;/li&gt;
  &lt;li&gt;Nano-X 2.4GHz Receiver and Transmitter&lt;/li&gt;
  &lt;li&gt;Industrial Strength Velcro to attach components to deck&lt;/li&gt;
  &lt;li&gt;Threaded inserts and screws to secure enclosure to deck&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to breakdown the components of this electric longboard into more detail I have organized them into the following categories: electrical, drivetrain, deck/enclosure.&lt;/p&gt;

&lt;h2 id=&quot;electrical&quot;&gt;Electrical&lt;/h2&gt;

&lt;p&gt;The electrical components power the board and also allow for control of the motor in terms of accelerating and decelerating. The overall wiring diagrams are shown below:
&lt;br /&gt;
&lt;img src=&quot;/images/Battery_Wire_Diagram.jpg&quot; alt=&quot;Battery Wire Diagram&quot; /&gt;
&lt;img src=&quot;/images/Balance_Wire_Diagram.jpg&quot; alt=&quot;Balance Wire Diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The two main choices for batteries are usually lithium-polymer (lipo) or lithium-ion (lion). Lion batteries are more prone to voltage sag (voltage drops quickly for a short period of time under heavy discharge, then goes back up to slightly less than where it was originally) so they are better in large packs where this effect can be mitigated. Lipo batteries are much better with regard to voltage sag so smaller packs are feasible.&lt;/p&gt;

&lt;p&gt;The general rule of thumb is putting more batteries in series results in higher voltage and hence more power/torque and a higher top speed. Placing more batteries in parallel increases overall capacity and hence the range of the board on a singular charge.&lt;/p&gt;

&lt;p&gt;I bought 4 3S (3 cells in series, each cell being ~3.7V for a total of ~11.1V per pack) lipo batteries. This gave me some flexibility in terms of their arrangement. I could pick 6S with 2 spare batteries, 6S2P (shorthand for 6 cells in series in parallel with another 6 cells in series), 9S with 1 spare battery or 12S.&lt;/p&gt;

&lt;p&gt;I chose to go with a 6S2P configuration because I was aiming for more range and less power for this particular build: 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/batteries.jpg&quot; alt=&quot;Lipo Batteries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Two sets of two battery packs were connected in series and their main/balance leads were both connected to a parallel charging board: 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/parallel_board.jpg&quot; alt=&quot;Parallel Board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the balance board, the output is split in parallel with one branch dedicated to the charger and one branch dedicated to powering the motor controller. Since the enclosure is screwed on, it is much easier if the batteries can be plugged into the charger while remaining inside the enclosure. One of the parallel branches from the output can be pulled out of an opening in the enclosure along with the balance leads to quickly plug into the charger stationed anywhere outside the board. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/charging_port.jpg&quot; alt=&quot;Charging Port&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The other parallel branch powers the FOCBOX motor controller which is a motor controller specifically designed for electronic longboard applications and runs on the &lt;a href=&quot;http://vedder.se/&quot;&gt;open source firmware&lt;/a&gt; and GUI developed by Ben Vedder. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/vesc.jpg&quot; alt=&quot;Vesc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It has 2 modes of operation, BLDC and FOC, I choose to use FOC because it is quieter and has smoother operation. The current limits for the battery and motor were adjusted appropriately for safe and efficient operation.&lt;/p&gt;

&lt;p&gt;An on-off mechanism was also necessary and it made the most sense to put it on this branch of the circuit where it could be accessible from the side of the enclosure if holes were drilled. This way the board could easily be turned on for use and off when not in use to preserve battery. I used AS150 anti-spark connectors to reduce the amount of sparking when the system was turned on. The wire is soldered on the ends of the male and female connectors which are screwed into plastic housings.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/as150.jpg&quot; alt=&quot;AS150 Anti-Spark Connectors&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The motor controller then has 3 phase wires which connect directly to the 190KV Brushless Outrunner Motor. The bullet connectors from the motor controller and the motor phase wires did not match in size so I soldered together adapters by putting 3mm bullet leads inside 5mm bullet leads which created a tight seal while still allowing for easy detachment. One of my goals was to make this project as modular as possible to allow for upgrades and altercations in the future. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/phase_wires.jpg&quot; alt=&quot;Phase Wires&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally a Nano-X transmitter/receiver pair are used to control the longboard once it is in operation. It can accelerate and decelerate using a throttle control.&lt;/p&gt;

&lt;h2 id=&quot;drivetrain&quot;&gt;Drivetrain&lt;/h2&gt;

&lt;p&gt;The drivetrain consists of a motor pulley, wheel pulley, drive belt and motor mount. The main objective of the drivetrain is to generate as much torque as possible because a lot of power is needed to move the combined weight of a human and longboard, especially when hills are involved. Moreover, this is a single drive design meaning the wheel with the motor attached to it is providing all the power as the other 3 wheels will simply move in response once the longboard gets going. To achieve a high level of torque a small gear is attached to the motor (16 teeth) and a large gear is attached to one of the longboard wheels (36 teeth). 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/pinion.jpg&quot; alt=&quot;Pinion Gear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The high rpm from the motor is converted into more torque for the wheel. The two gears are connected via drive belt which is a strong rubber-fibre glass composite. The motor is connected to the longboard trucks using a motor mount as pictured below:
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/motor_mount.jpg&quot; alt=&quot;Motor Mount&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deckenclosure&quot;&gt;Deck/Enclosure&lt;/h2&gt;

&lt;p&gt;The last element to consider is how to keep all the electrical components under the deck and dampen the effects of vibration on them. Furthermore, an enclosure was needed to protect the electronics from water and various debris while riding the longboard.&lt;/p&gt;

&lt;p&gt;I attached all the components directly to the deck using industrial strength velcro. The connection is very secure and the components can still be removed for inspection or changes, again attempting to have more modularity.&lt;/p&gt;

&lt;p&gt;To attach the enclosure, I used threaded inserts installed directly into the wood longboard deck.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/images/threaded_insert.jpg&quot; alt=&quot;Threaded Insert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The enclosure has 6 holes drilled along its edges and screws are used to secure it to the deck. A seal was also placed on the inside of the enclosure hugging the edges of the enclosure to create a watertight seal. 
&lt;img src=&quot;/images/enclosure.jpg&quot; alt=&quot;Enclosure&quot; /&gt;&lt;/p&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="electrical" /><category term="mechanical" /><category term="motor" /><category term="battery" /><summary type="html">After many hours of research, ordering parts, assembly and troubleshooting my electric longboard completed its first few trial runs as shown in the videos below.</summary></entry><entry><title type="html">Virtual White Cane</title><link href="http://localhost:4000/Virtual-Cane/" rel="alternate" type="text/html" title="Virtual White Cane" /><published>2017-12-02T00:00:00-05:00</published><updated>2017-12-02T00:00:00-05:00</updated><id>http://localhost:4000/Virtual-Cane</id><content type="html" xml:base="http://localhost:4000/Virtual-Cane/">&lt;html&gt;
&lt;head&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/style_cane.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&quot;main_style&quot;&gt;
    &lt;p&gt; This device serves as a replacement to the traditional white cane visually impaired people
 	use to navigate around various obstacles in day to day life. The contraption attaches to the
	user's chest and operates autonomously, freeing up both hands of the user which is 
	advantageous to the traditional white cane. 
    &lt;/p&gt;
  &lt;h3&gt; Below are pictures showing the device mounted on a person &lt;/h3&gt;
  &lt;table border=&quot;0&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt; &lt;img src=&quot;/images/front.png&quot; width=&quot;90%&quot; alt=&quot;Front View&quot; /&gt; &lt;/td&gt;
    &lt;td&gt; &lt;img src=&quot;/images/side.png&quot; width=&quot;90%&quot; alt=&quot;Side View&quot; /&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt; &lt;p&gt; Front View &lt;/p&gt; &lt;/td&gt;
    &lt;td&gt; &lt;p&gt; Side View &lt;/p&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;
  &lt;p&gt; The virtual white cane operates by sweeping the area in front of the 
      user using 2 ultrasonic sensors
      and alerting them of incoming obstacles or changes in elevation with a sound notification. As the user
      gets closer to an obstacle, the frequency of beeps increases. The downward facing ultrasonic sensor
      detects changes in elevation. A gyroscope sensor attached to a hard-hat worn on the user's head allows
      the system to rotate in unison with the user's head. This allows for checking in different directions
      for obstacles which is useful for turning or in busy areas. 
  &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;videos&quot;&gt;
  &lt;h3&gt; Below are videos demonstrating the device in use &lt;/h3&gt;
  &lt;table align=&quot;center&quot; border=&quot;0&quot;&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt; &lt;iframe src=&quot;https://drive.google.com/file/d/1_-9pEfj7x7gs6Rve5QSmp0HyGs6dFgJA/preview&quot; width=&quot;500&quot; height=&quot;375&quot;&gt;&lt;/iframe&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td align=&quot;center&quot;&gt; &lt;iframe src=&quot;https://drive.google.com/file/d/14iVf51J6JEvZC5jMUgVkhQTismkL8uRx/preview&quot; width=&quot;500&quot; height=&quot;375&quot;&gt;&lt;/iframe&gt; &lt;/td&gt;
  &lt;/tr&gt;
  &lt;/table&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="software" /><category term="electrical" /><category term="mechanical" /><category term="team" /><category term="motor" /><category term="c++" /><category term="sensor" /><summary type="html">This device serves as a replacement to the traditional white cane visually impaired people use to navigate around various obstacles in day to day life. The contraption attaches to the user's chest and operates autonomously, freeing up both hands of the user which is advantageous to the traditional white cane. Below are pictures showing the device mounted on a person Front View Side View The virtual white cane operates by sweeping the area in front of the user using 2 ultrasonic sensors and alerting them of incoming obstacles or changes in elevation with a sound notification. As the user gets closer to an obstacle, the frequency of beeps increases. The downward facing ultrasonic sensor detects changes in elevation. A gyroscope sensor attached to a hard-hat worn on the user's head allows the system to rotate in unison with the user's head. This allows for checking in different directions for obstacles which is useful for turning or in busy areas. Below are videos demonstrating the device in use</summary></entry><entry><title type="html">Robot Arm</title><link href="http://localhost:4000/Robot-Arm/" rel="alternate" type="text/html" title="Robot Arm" /><published>2017-10-07T00:00:00-04:00</published><updated>2017-10-07T00:00:00-04:00</updated><id>http://localhost:4000/Robot-Arm</id><content type="html" xml:base="http://localhost:4000/Robot-Arm/">&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/robot_arm_style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&quot;main_style&quot;&gt;
    &lt;p&gt; In the Mechatronics program at Waterloo, it is an annual tradition to host a &quot;Tron Days&quot; event for first year students
    where teams of 4 are put together and given a task to complete within roughly a span of 36 hours. In this iteration, our task
    was to construct a robot arm which could pick up bones and place them in various orientations and positions on a wooden board
    representing a mock patient. Below, our robot arm is shown. &lt;/p&gt;
    &lt;img src=&quot;/images/arm.jpg&quot; alt=&quot;robot-arm&quot; width=&quot;90%&quot; class=&quot;center-custom&quot; /&gt;
    &lt;br /&gt;
    &lt;p&gt; The mechanical pieces of the arm come from a Tetrix Robot Kit given to each group. After careful planning and modelling in AutoCad,
    we constructed our device using several gear systems to give the arm the ability to move freely both horizontally and vertically. A 
    base was added to reinforce the structure and a servo was added to control the gears. Using a transmitter and receiver, I was able to
    control the movement of the arm and partake in a competition measuring the accuracy, speed and durability of our design. &lt;/p&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="software" /><category term="electrical" /><category term="mechanical" /><category term="team" /><category term="servo" /><category term="motor" /><category term="AutoCad" /><summary type="html">In the Mechatronics program at Waterloo, it is an annual tradition to host a &quot;Tron Days&quot; event for first year students where teams of 4 are put together and given a task to complete within roughly a span of 36 hours. In this iteration, our task was to construct a robot arm which could pick up bones and place them in various orientations and positions on a wooden board representing a mock patient. Below, our robot arm is shown. The mechanical pieces of the arm come from a Tetrix Robot Kit given to each group. After careful planning and modelling in AutoCad, we constructed our device using several gear systems to give the arm the ability to move freely both horizontally and vertically. A base was added to reinforce the structure and a servo was added to control the gears. Using a transmitter and receiver, I was able to control the movement of the arm and partake in a competition measuring the accuracy, speed and durability of our design.</summary></entry><entry><title type="html">Username Generator</title><link href="http://localhost:4000/Username-Generator/" rel="alternate" type="text/html" title="Username Generator" /><published>2017-07-21T00:00:00-04:00</published><updated>2017-07-21T00:00:00-04:00</updated><id>http://localhost:4000/Username%20Generator</id><content type="html" xml:base="http://localhost:4000/Username-Generator/">&lt;html&gt;
&lt;head&gt;
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/style_username.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id=&quot;instructions_container&quot;&gt;
    &lt;p&gt; To use the generator, complete any of the fields that contain information you wish to include in your potential username. 
        When you are ready, press the submit button and up to 9 usernames will be generated for you. Enjoy! &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;form_container&quot;&gt;
  &lt;form id=&quot;form1&quot; action=&quot;&quot; method=&quot;get&quot;&gt;
    &lt;table id=&quot;form_table&quot;&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Name:         &lt;input class=&quot;input_box&quot; type=&quot;text&quot; name=&quot;name&quot; /&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Lucky Number: &lt;input class=&quot;input_box&quot; type=&quot;number&quot; name=&quot;number&quot; /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Favourite Colour: &lt;input class=&quot;input_box&quot; type=&quot;text&quot; name=&quot;colour&quot; /&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Profession: &lt;input class=&quot;input_box&quot; type=&quot;text&quot; name=&quot;profession&quot; /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Adjective: &lt;input class=&quot;input_box&quot; type=&quot;text&quot; name=&quot;adjective&quot; /&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Favourite Video Game: &lt;input class=&quot;input_box&quot; type=&quot;text&quot; name=&quot;video_game&quot; /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
          Favourite Sport: &lt;select class=&quot;input_box&quot; id=&quot;sport&quot;&gt;
                             &lt;option value=&quot;&quot;&gt; -- &lt;/option&gt;
                             &lt;option value=&quot;soccer&quot;&gt; Soccer &lt;/option&gt;
	       	             &lt;option value=&quot;ball&quot;&gt; Basketball &lt;/option&gt;
                             &lt;option value=&quot;football&quot;&gt; Football &lt;/option&gt;
                             &lt;option value=&quot;hockey&quot;&gt; Hockey &lt;/option&gt;
                             &lt;option value=&quot;golf&quot;&gt; Golf &lt;/option&gt;
                             &lt;option value=&quot;swimming&quot;&gt; Swimming &lt;/option&gt;
                             &lt;option value=&quot;baseball&quot;&gt; Baseball &lt;/option&gt;
                             &lt;option value=&quot;tennis&quot;&gt; Tennis &lt;/option&gt;
                           &lt;/select&gt;
        &lt;/td&gt;
        &lt;td&gt;
          Favourite Animal: &lt;select class=&quot;input_box&quot; id=&quot;animal&quot;&gt;
                             &lt;option value=&quot;&quot;&gt; -- &lt;/option&gt;
                             &lt;option value=&quot;dog&quot;&gt; Dog &lt;/option&gt;
                             &lt;option value=&quot;cat&quot;&gt; Cat &lt;/option&gt;
                             &lt;option value=&quot;hamster&quot;&gt; Hamster &lt;/option&gt;
                             &lt;option value=&quot;bird&quot;&gt; Bird &lt;/option&gt;
                             &lt;option value=&quot;lizard&quot;&gt; Lizard &lt;/option&gt;
                             &lt;option value=&quot;snake&quot;&gt; Snake &lt;/option&gt;
                             &lt;option value=&quot;fish&quot;&gt; Fish &lt;/option&gt;
                             &lt;option value=&quot;bunny&quot;&gt; Bunny &lt;/option&gt;
                           &lt;/select&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;input type=&quot;button&quot; class=&quot;button&quot; onclick=&quot;myFunction()&quot; value=&quot;Submit&quot; /&gt;
  &lt;/form&gt;
  &lt;/div&gt;
  &lt;div id=&quot;username_box&quot; style=&quot;display: none;&quot;&gt;
    &lt;!-- div that will display generated usernames upon button click --&gt;
    &lt;div id=&quot;username_display&quot; style=&quot;display: none;&quot;&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;script&gt;
function myFunction() {

  // define form1
  var form1 = document.getElementById(&quot;form1&quot;);

  // variable to hold number of input fields, input tags + select tags, minus 1 to account for button
  var numInputFieldsTotal = form1.getElementsByTagName(&quot;input&quot;).length - 1;

  var inputFields = document.getElementsByTagName(&quot;input&quot;);
  
  // same variable as above, but only counts inputs that have been filled out
  var numActiveInputFields = 0;
  
  /* loop through input fields, add to numInputFieldsTotal variable
  if field is not empty and exclude the value of the submit button */
  for (var j=0; j &lt; numInputFieldsTotal; j++) {
    if (inputFields[j].value != &quot;&quot; &amp;&amp; inputFields[j].value != &quot;Submit&quot;) {
      numActiveInputFields += 1;
    }
  }

  // same process for select fields

  // all select fields
  var selectFields = form1.getElementsByTagName(&quot;select&quot;);

  // same variable as above to store active select fields, only counts filled out select inputs in for loop
  var numActiveSelectFields = 0; 

  for (var h=0; h &lt; selectFields.length; h ++) {
    if (selectFields[h].value != &quot;&quot;) {
      numActiveSelectFields += 1;
    }
  }
 
  // sum of total active input and select fields, minus 1 to account for button
  var sumActiveFields = numActiveInputFields + numActiveSelectFields;
  
  // store all inputs into an array
  var arrayInputs = [];
  for (var i=0; i &lt; (numInputFieldsTotal); i++) {
    /* assign each input to a variable if input not empty and 
    not submit (to avoid button value) and not the same as other values */
    if (inputFields[i].value != &quot;&quot; &amp;&amp; inputFields[i].value != &quot;Submit&quot; &amp;&amp; !arrayInputs.includes(inputFields[i].value)) {
      arrayInputs[i] = inputFields[i].value;
    }
    // otherwise assign the index a placeholder number equal to the index
    else {
      arrayInputs[i] = i;
    }
  }
 
  var tempInputArrayLength = arrayInputs.length;
  /* remove placeholders numbers from before. Two variables are used
  in this foor loop. The splicing method removes the index and pushes
  the other indices in front of it down 1 spot. Thus this must be 
  accounted for by decrementing the variable b each time the splicing
  occurs */
  var a = 0
  var b = a;
  for(a; a &lt; tempInputArrayLength; a++) {
    if(arrayInputs[b] == a) {
      console.log(&quot;Splice&quot; + &quot; a: &quot; + a + &quot; b: &quot; + b);
      arrayInputs.splice(b, 1);
      b -= 1;
    }
    b += 1;
  }
  
  // store all select inputs into an array
  var arraySelectInputs = [];
  for (var k=0; k &lt; 2; k++) {
    // make sure select field is filled in
    if (selectFields[k].value != &quot;&quot;) {
      arraySelectInputs[k] = selectFields[k].value;
    }
  }

  // combine the two arrays of regular inputs and select inputs
  arrayAllInputs = arrayInputs.concat(arraySelectInputs);

  // variable to hold arrays of multiple usernames
  var usernames = [];
  
  // loop that combines all the inputs in a random order, number of times dictated by &quot;q &lt; x&quot; where x represents the number of times
  for ( var q=0; q &lt; 9; q++) {
    // initialize an array inside the username array
    usernames[q] = [];
    
    // keep adding to the inside array until all the inputs have been inserted
    while (usernames[q].length &lt; arrayAllInputs.length) {
      
      // generate a random number to pick a random input
      var random = Math.floor(Math.random() * arrayAllInputs.length);
      
      // if the input is not already in the inside array, add it 
      if (!usernames[q].includes(arrayAllInputs[random])) {
        usernames[q].push(arrayAllInputs[random]);
      }
    }
  }
  
  var usernameStrings = [];
  // join inside arrays into strings, w &lt; &quot;x&quot; x should be the same as the q &lt; &quot;X&quot; from the above for loop
  for ( var w=0; w &lt; 9; w ++) {
    usernameStrings[w] = usernames[w].join(&quot;&quot;);
  }

  // open larger username box for users to view
  document.getElementById(&quot;username_box&quot;).style.display = &quot;block&quot;;
  
  // open username display box for users to view
  document.getElementById(&quot;username_display&quot;).style.display = &quot;block&quot;;
  
  // clear previous content from username_display
  document.querySelector('#username_display').innerHTML = &quot;&quot;;

  // display usernames individually
  for( var n=0; n &lt; 9; n++) {
    // print a new line after every 3 usernames
    if( (n % 3 == 0) &amp;&amp; (n !=0) ) {
      document.querySelector('#username_display').innerHTML += (&quot;&lt;br&gt;&quot;);
    }
    // check if username combo already exists
    if (document.querySelector('#username_display').innerHTML.indexOf(usernameStrings[n]) != -1) {
      document.querySelector('#username_display').innerHTML += &quot;  &quot;;
    }
    else {
      document.querySelector('#username_display').innerHTML += &quot;  &quot; + usernameStrings[n];
    }
  }
}
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="software" /><category term="html" /><category term="css" /><category term="javascript" /><summary type="html">To use the generator, complete any of the fields that contain information you wish to include in your potential username. When you are ready, press the submit button and up to 9 usernames will be generated for you. Enjoy! Name: Lucky Number: Favourite Colour: Profession: Adjective: Favourite Video Game: Favourite Sport: -- Soccer Basketball Football Hockey Golf Swimming Baseball Tennis Favourite Animal: -- Dog Cat Hamster Bird Lizard Snake Fish Bunny</summary></entry><entry><title type="html">Arduino Projects</title><link href="http://localhost:4000/Arduino-Projects/" rel="alternate" type="text/html" title="Arduino Projects" /><published>2017-07-12T00:00:00-04:00</published><updated>2017-07-12T00:00:00-04:00</updated><id>http://localhost:4000/Arduino%20Projects</id><content type="html" xml:base="http://localhost:4000/Arduino-Projects/">&lt;h2 id=&quot;there-are-several-mini-projects-listed-below-the-source-code-and-additional-information-can-be-found-by-following-their-links-to-the-online-arduino-ide&quot;&gt;There are several mini-projects listed below, the source code and additional information can be found by following their links to the online Arduino IDE&lt;/h2&gt;

&lt;h3 id=&quot;arduino---led-brightness-controlled-by-button&quot;&gt;&lt;a href=&quot;https://create.arduino.cc/editor/TibSupreme/3dccd81d-d4ab-4f97-a68f-8f3fdbc88d03/preview&quot;&gt;Arduino - LED Brightness controlled by Button&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;LED brightness controlled by a button system, one to brighten and one to dim.&lt;/p&gt;

&lt;h3 id=&quot;arduino---rgb-led&quot;&gt;&lt;a href=&quot;https://create.arduino.cc/editor/TibSupreme/892a6181-7690-4980-84d1-3e697c827bee/preview&quot;&gt;Arduino - RGB LED&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An RGB LED which randomly changes colours and fades out each individual colour.&lt;/p&gt;

&lt;h3 id=&quot;arduino---traffic-and-pedestrian-lights&quot;&gt;&lt;a href=&quot;https://create.arduino.cc/editor/TibSupreme/76d7f384-c75e-4f57-b561-04cca260d48a/preview&quot;&gt;Arduino - Traffic and Pedestrian Lights&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;A set of traffic and pedestrian lights controlled by a button. They work in unison with each other to ensure appropriate timing.&lt;/p&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="software" /><category term="electrical" /><category term="c++" /><category term="circuits" /><summary type="html">There are several mini-projects listed below, the source code and additional information can be found by following their links to the online Arduino IDE</summary></entry><entry><title type="html">Survival Arcade Game</title><link href="http://localhost:4000/Survival-Game/" rel="alternate" type="text/html" title="Survival Arcade Game" /><published>2017-06-15T00:00:00-04:00</published><updated>2017-06-15T00:00:00-04:00</updated><id>http://localhost:4000/Survival-Game</id><content type="html" xml:base="http://localhost:4000/Survival-Game/">&lt;html&gt;
&lt;head&gt;
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/css/style_game.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;main_style&quot;&gt;
  &lt;p&gt; Below are pictures of the many different elements of the game I created using Java on the Greenfoot platform.
      This game features various gamestates allowing for transitions between levels, tracking lives, keeping count of
      asteroid/naval mine kills and an end game screen. Furthermore, there is an abundance of different classes, utilizing
      the versatility of object-oriented programming.  I have also included the gfar project file, which can be opened
      with Greenfoot. &lt;/p&gt;
  &lt;h3&gt; Some the different states in the game are shown below&lt;/h3&gt;
  &lt;h3&gt; Instructions &lt;/h3&gt; 
  &lt;img src=&quot;/images/greenfootInstructions.png&quot; alt=&quot;Instructions&quot; /&gt;
  &lt;br /&gt;
  &lt;h3&gt; Asteroid Level &lt;/h3&gt; 
  &lt;img src=&quot;/images/greenfootAsteroidLvl.png&quot; alt=&quot;Asteroid Level&quot; /&gt;
  &lt;br /&gt;
  &lt;h3&gt; Shield &lt;/h3&gt;
  &lt;img src=&quot;/images/greenfootShield.png&quot; alt=&quot;Shield&quot; /&gt; 
  &lt;br /&gt;
  &lt;h3&gt; Naval Level &lt;/h3&gt;
  &lt;img src=&quot;/images/greenfootNavalLvl.png&quot; alt=&quot;Naval Level&quot; /&gt;
  &lt;br /&gt;
  &lt;h3&gt; Game Over Screen &lt;/h3&gt;
  &lt;img src=&quot;/images/greenfootGameOver.png&quot; alt=&quot;Game Over&quot; /&gt;
&lt;/div&gt;
&lt;div id=&quot;extra&quot;&gt;
  &lt;a href=&quot;/SurvivalGame.gfar/&quot; download=&quot;&quot;&gt;Download Game&lt;/a&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content><author><name>Tibi Andronescu</name><email>taandron@uwaterloo.ca</email></author><category term="software" /><category term="java" /><category term="game" /><category term="oop" /><summary type="html">Below are pictures of the many different elements of the game I created using Java on the Greenfoot platform. This game features various gamestates allowing for transitions between levels, tracking lives, keeping count of asteroid/naval mine kills and an end game screen. Furthermore, there is an abundance of different classes, utilizing the versatility of object-oriented programming. I have also included the gfar project file, which can be opened with Greenfoot. Some the different states in the game are shown below Instructions Asteroid Level Shield Naval Level Game Over Screen Download Game</summary></entry></feed>